[
  {
    "objectID": "global_splicing.html",
    "href": "global_splicing.html",
    "title": "Global characterisation of detected splice events",
    "section": "",
    "text": "A splicing analysis of your RNA-seq data has been preformed with the MAJIQ workflow.\nThe output is split by the splicing classes and stored in .tsv files.\nThis script only looks at one of the two data sets you have (e.g.Â only one cell line). You should therefore perform the analyses twice, once for each data set."
  },
  {
    "objectID": "global_splicing.html#required-packages",
    "href": "global_splicing.html#required-packages",
    "title": "Global characterisation of detected splice events",
    "section": "Required packages",
    "text": "Required packages\nHere you can find the packages we need. You can install them with the install.packages() command.\n\nlibrary(dplyr) # to easily handle data.frames \nlibrary(knitr) # beautiful tables\n\nlibrary(ggplot2) # nice plots\nlibrary(ggpubr) # for even more nice plots"
  },
  {
    "objectID": "global_splicing.html#loading-the-tsv-files",
    "href": "global_splicing.html#loading-the-tsv-files",
    "title": "Global characterisation of detected splice events",
    "section": "Loading the TSV-Files",
    "text": "Loading the TSV-Files\nFirst, we load the TSV-files as data.frames into R. We are only look at the most common classes of splicing. You can see in the output folder, that you get much more TSV-files, but we will ignore all others.\n\n# --------------------\n# Input\n# --------------------\n\n# path to the folder that contains the .tsv files\nin_path &lt;- \"/Users/melinaklostermann/Documents/projects/students/majiq-course/spezi_scripts_website/example_data/modulise/SFPQ_HepG2_Control-SFPQ_HepG2_shRNA/\"\n\n# These are the splicing classes we want to look at.\n# We make a list with the file names, and give each object in the list a name\n# the syntax is object_name = \"file_name.tsv\"\n\ninteresting_classes &lt;- list(alternative_3_prime_splice_site = \"alt3prime.tsv\",\n                         alternative_5_prime_splice_site = \"alt5prime.tsv\",\n                         cassette_exons = \"cassette.tsv\",\n                         alternative_first_exon = \"alternate_first_exon.tsv\",\n                         alternative_last_exon = \"alternate_last_exon.tsv\",\n                         mutually_exclusive_exons = \"mutually_exclusive.tsv\",\n                         intron_retention =\"alternative_intron.tsv\")\n\ninteresting_classes \n\n$alternative_3_prime_splice_site\n[1] \"alt3prime.tsv\"\n\n$alternative_5_prime_splice_site\n[1] \"alt5prime.tsv\"\n\n$cassette_exons\n[1] \"cassette.tsv\"\n\n$alternative_first_exon\n[1] \"alternate_first_exon.tsv\"\n\n$alternative_last_exon\n[1] \"alternate_last_exon.tsv\"\n\n$mutually_exclusive_exons\n[1] \"mutually_exclusive.tsv\"\n\n$intron_retention\n[1] \"alternative_intron.tsv\"\n\n\n\n# --------------------\n# Import tsvs\n# --------------------\n\n# load the content of the tsv files by looping over the interesting_classes list\nsplice_results_list &lt;- interesting_classes\n\n# read in the tsv files with a loop over all tsv files\nfor(i in 1:length(interesting_classes)){\n  \n  # we use the read_table function to import the tsv files\n  splice_results_list [[i]] = read.table(paste0(in_path, interesting_classes[[i]]),\n                       header=TRUE,\n                       sep=\"\\t\",\n                       stringsAsFactors=FALSE)\n}\n\n# the tsv files are now imported in the splice_results list\n# each object in the splice_results list are the results of one class of splicing (in data.frame format)\n\n\n# --------------------\n# have a closer look at the loop from above\n# --------------------\n\nlength(interesting_classes) # the length of the list interesting_classes\n\n[1] 7\n\n1:length(interesting_classes) # a vector from one until the length of the interesting_classes list\n\n[1] 1 2 3 4 5 6 7\n\ninteresting_classes[[3]]  %&gt;% kable() # the third object in the interesting classes results list\n\n\n\n\nx\n\n\n\n\ncassette.tsv\n\n\n\n\npaste0(in_path, interesting_classes[[3]]) # the path to the third tsv file\n\n[1] \"/Users/melinaklostermann/Documents/projects/students/majiq-course/spezi_scripts_website/example_data/modulise/SFPQ_HepG2_Control-SFPQ_HepG2_shRNA/cassette.tsv\"\n\nhead(splice_results_list[[3]])  %&gt;% kable() # the third object in the splice results list\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodule_id\ngene_id\ngene_name\nseqid\nstrand\nlsv_id\nevent_id\ncomplex\ndenovo\nreference_exon_coord\nspliced_with\nspliced_with_coord\njunction_name\njunction_coord\nevent_size\nevent_non_changing\nevent_changing\njunction_changing\nSFPQ_HepG2_Control_median_psi\nSFPQ_HepG2_shRNA_median_psi\nSFPQ_HepG2_shRNA.SFPQ_HepG2_Control_median_dpsi\nSFPQ_HepG2_shRNA.SFPQ_HepG2_Control_probability_changing\nSFPQ_HepG2_shRNA.SFPQ_HepG2_Control_probability_non_changing\n\n\n\n\nENSG00000122557.11_1\nENSG00000122557.11\nHERPUD2\nchr7\n-\nENSG00000122557.11:s:35694184-35694627\nENSG00000122557.11_1_CE_1\nTrue\nFalse\n35694184-35694627\nC2\n35670215-35670328\nC1_C2\n35670328-35694184\n78\nFalse\nFalse\nFalse\n0.080\n0.055\n-0.015\n0.486\n0.212\n\n\nENSG00000122557.11_1\nENSG00000122557.11\nHERPUD2\nchr7\n-\nENSG00000122557.11:s:35694184-35694627\nENSG00000122557.11_1_CE_1\nTrue\nFalse\n35694184-35694627\nA\n35673201-35673278\nC1_A\n35673278-35694184\n78\nFalse\nFalse\nFalse\n0.862\n0.934\n0.050\n0.644\n0.079\n\n\nENSG00000122557.11_1\nENSG00000122557.11\nHERPUD2\nchr7\n-\nENSG00000122557.11:t:35670215-35670328\nENSG00000122557.11_1_CE_1\nTrue\nFalse\n35670215-35670328\nC1\n35694184-35694627\nC2_C1\n35670328-35694184\n78\nFalse\nFalse\nFalse\n0.026\n0.032\n0.002\n0.280\n0.586\n\n\nENSG00000122557.11_1\nENSG00000122557.11\nHERPUD2\nchr7\n-\nENSG00000122557.11:t:35670215-35670328\nENSG00000122557.11_1_CE_1\nTrue\nFalse\n35670215-35670328\nA\n35673201-35673278\nC2_A\n35670328-35673201\n78\nFalse\nFalse\nFalse\n0.974\n0.968\n-0.002\n0.280\n0.586\n\n\nENSG00000011426.11_1\nENSG00000011426.11\nANLN\nchr7\n+\nENSG00000011426.11:s:36415758-36415885\nENSG00000011426.11_1_CE_1\nFalse\nFalse\n36415758-36415884\nC2\n36419244-36419479\nC1_C2\n36415884-36419244\n111\nFalse\nFalse\nFalse\n0.237\n0.163\n-0.052\n0.707\n0.067\n\n\nENSG00000011426.11_1\nENSG00000011426.11\nANLN\nchr7\n+\nENSG00000011426.11:s:36415758-36415885\nENSG00000011426.11_1_CE_1\nFalse\nFalse\n36415758-36415884\nA\n36417080-36417190\nC1_A\n36415884-36417080\n111\nFalse\nFalse\nFalse\n0.763\n0.837\n0.052\n0.707\n0.067"
  },
  {
    "objectID": "global_splicing.html#cleaning-up-the-splicing-results-for-easier-usage",
    "href": "global_splicing.html#cleaning-up-the-splicing-results-for-easier-usage",
    "title": "Global characterisation of detected splice events",
    "section": "Cleaning up the splicing results for easier usage",
    "text": "Cleaning up the splicing results for easier usage\nWe combine the data.frames in the list into one data.frame for easier handling.\n\nAdd a class column\n\n# --------------------\n# combine all data frames in the list into one data.frame\n# --------------------\n\n# You can select a object from the list by its name\nhead(splice_results_list$alternative_3_prime_splice_site)  %&gt;% kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodule_id\ngene_id\ngene_name\nseqid\nstrand\nlsv_id\nevent_id\ncomplex\ndenovo\nreference_exon_coord\nspliced_with\nspliced_with_coord\njunction_name\njunction_coord\nevent_size\nevent_non_changing\nevent_changing\njunction_changing\nSFPQ_HepG2_Control_median_psi\nSFPQ_HepG2_shRNA_median_psi\nSFPQ_HepG2_shRNA.SFPQ_HepG2_Control_median_dpsi\nSFPQ_HepG2_shRNA.SFPQ_HepG2_Control_probability_changing\nSFPQ_HepG2_shRNA.SFPQ_HepG2_Control_probability_non_changing\n\n\n\n\nENSG00000159685.11_1\nENSG00000159685.11\nCHCHD6\nchr3\n+\nENSG00000159685.11:s:126733078-126733222\nENSG00000159685.11_1_A3_1\nFalse\nFalse\n126733078-126733222\nE2\n126852644-126852730\nProximal\n126733222-126852644\n3\nFalse\nFalse\nFalse\n0.046\n0.056\n0.007\n0.435\n0.283\n\n\nENSG00000159685.11_1\nENSG00000159685.11\nCHCHD6\nchr3\n+\nENSG00000159685.11:s:126733078-126733222\nENSG00000159685.11_1_A3_1\nFalse\nFalse\n126733078-126733222\nE2\n126852644-126852730\nDistal\n126733222-126852647\n3\nFalse\nFalse\nFalse\n0.950\n0.940\n-0.007\n0.445\n0.270\n\n\nENSG00000197841.15_1\nENSG00000197841.15\nZNF181\nchr19\n+\nENSG00000197841.15:s:34739148-34739268\nENSG00000197841.15_1_A3_1\nFalse\nFalse\n34739148-34739268\nE2\n34739523-34739621\nProximal\n34739268-34739523\n3\nFalse\nFalse\nFalse\n0.446\n0.451\n0.011\n0.625\n0.079\n\n\nENSG00000197841.15_1\nENSG00000197841.15\nZNF181\nchr19\n+\nENSG00000197841.15:s:34739148-34739268\nENSG00000197841.15_1_A3_1\nFalse\nFalse\n34739148-34739268\nE2\n34739523-34739621\nDistal\n34739268-34739526\n3\nFalse\nFalse\nFalse\n0.554\n0.549\n-0.011\n0.625\n0.079\n\n\nENSG00000076685.19_4\nENSG00000076685.19\nNT5C2\nchr10\n-\nENSG00000076685.19:s:103101045-103101102\nENSG00000076685.19_4_A3_1\nTrue\nFalse\n103101045-103101102\nE2\n103100752-103100964\nProximal\n103100964-103101045\n21\nFalse\nFalse\nFalse\n0.029\n0.059\n0.017\n0.505\n0.223\n\n\nENSG00000076685.19_4\nENSG00000076685.19\nNT5C2\nchr10\n-\nENSG00000076685.19:s:103101045-103101102\nENSG00000076685.19_4_A3_1\nTrue\nFalse\n103101045-103101102\nE2\n103100752-103100964\nDistal\n103100943-103101045\n21\nFalse\nFalse\nFalse\n0.079\n0.148\n0.040\n0.645\n0.096\n\n\n\n\n# Add a new column with the class name\n#####################################\n\n# now you can add a new column to the object that has the object name\nsplice_results_list$alternative_3_prime_splice_site &lt;- mutate(splice_results_list$alternative_3_prime_splice_site,\n                                                         class = \"alternative_3_prime_splice_site\")\n\nhead(splice_results_list$alternative_3_prime_splice_site)  %&gt;% kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodule_id\ngene_id\ngene_name\nseqid\nstrand\nlsv_id\nevent_id\ncomplex\ndenovo\nreference_exon_coord\nspliced_with\nspliced_with_coord\njunction_name\njunction_coord\nevent_size\nevent_non_changing\nevent_changing\njunction_changing\nSFPQ_HepG2_Control_median_psi\nSFPQ_HepG2_shRNA_median_psi\nSFPQ_HepG2_shRNA.SFPQ_HepG2_Control_median_dpsi\nSFPQ_HepG2_shRNA.SFPQ_HepG2_Control_probability_changing\nSFPQ_HepG2_shRNA.SFPQ_HepG2_Control_probability_non_changing\nclass\n\n\n\n\nENSG00000159685.11_1\nENSG00000159685.11\nCHCHD6\nchr3\n+\nENSG00000159685.11:s:126733078-126733222\nENSG00000159685.11_1_A3_1\nFalse\nFalse\n126733078-126733222\nE2\n126852644-126852730\nProximal\n126733222-126852644\n3\nFalse\nFalse\nFalse\n0.046\n0.056\n0.007\n0.435\n0.283\nalternative_3_prime_splice_site\n\n\nENSG00000159685.11_1\nENSG00000159685.11\nCHCHD6\nchr3\n+\nENSG00000159685.11:s:126733078-126733222\nENSG00000159685.11_1_A3_1\nFalse\nFalse\n126733078-126733222\nE2\n126852644-126852730\nDistal\n126733222-126852647\n3\nFalse\nFalse\nFalse\n0.950\n0.940\n-0.007\n0.445\n0.270\nalternative_3_prime_splice_site\n\n\nENSG00000197841.15_1\nENSG00000197841.15\nZNF181\nchr19\n+\nENSG00000197841.15:s:34739148-34739268\nENSG00000197841.15_1_A3_1\nFalse\nFalse\n34739148-34739268\nE2\n34739523-34739621\nProximal\n34739268-34739523\n3\nFalse\nFalse\nFalse\n0.446\n0.451\n0.011\n0.625\n0.079\nalternative_3_prime_splice_site\n\n\nENSG00000197841.15_1\nENSG00000197841.15\nZNF181\nchr19\n+\nENSG00000197841.15:s:34739148-34739268\nENSG00000197841.15_1_A3_1\nFalse\nFalse\n34739148-34739268\nE2\n34739523-34739621\nDistal\n34739268-34739526\n3\nFalse\nFalse\nFalse\n0.554\n0.549\n-0.011\n0.625\n0.079\nalternative_3_prime_splice_site\n\n\nENSG00000076685.19_4\nENSG00000076685.19\nNT5C2\nchr10\n-\nENSG00000076685.19:s:103101045-103101102\nENSG00000076685.19_4_A3_1\nTrue\nFalse\n103101045-103101102\nE2\n103100752-103100964\nProximal\n103100964-103101045\n21\nFalse\nFalse\nFalse\n0.029\n0.059\n0.017\n0.505\n0.223\nalternative_3_prime_splice_site\n\n\nENSG00000076685.19_4\nENSG00000076685.19\nNT5C2\nchr10\n-\nENSG00000076685.19:s:103101045-103101102\nENSG00000076685.19_4_A3_1\nTrue\nFalse\n103101045-103101102\nE2\n103100752-103100964\nDistal\n103100943-103101045\n21\nFalse\nFalse\nFalse\n0.079\n0.148\n0.040\n0.645\n0.096\nalternative_3_prime_splice_site\n\n\n\n\n# do the same for all classes\nsplice_results_list$alternative_5_prime_splice_site &lt;- mutate(splice_results_list$alternative_5_prime_splice_site,\n                                                         class = \"alternative_5_prime_splice_site\")\nsplice_results_list$cassette_exons &lt;- mutate(splice_results_list$cassette_exons,\n                                                         class = \"cassette_exons\")\nsplice_results_list$alternative_first_exon &lt;- mutate(splice_results_list$alternative_first_exon,\n                                                         class = \"alternative_first_exon\")\nsplice_results_list$alternative_last_exon &lt;- mutate(splice_results_list$alternative_last_exon,\n                                                         class = \"alternative_last_exon\")\nsplice_results_list$mutually_exclusive_exons &lt;- mutate(splice_results_list$mutually_exclusive_exons ,\n                                                         class = \"mutually_exclusive_exons\")\nsplice_results_list$intron_retention &lt;- mutate(splice_results_list$intron_retention,\n                                               class = \"intron_retention\")\n\n\n\nSelect only the most important columns\nWe select the following columns:\n\nName of the gene in which the LSV is located\nChromosome where the gene is located\nStrand of the gene\nUnique ID of the LSV\nPSI of the control samples (median of all samples)\nPSI of the condition samples (median of all samples, condition is for example knockout or knockdown)\ndeltaPSI of condition vs control\nProbability that the change (|deltaPSI|) was \\(\\ge\\) 0.05 (change of 5% or more)\nclass of splicing event\n\n\n# select important columns\n##########################\ncolnames(splice_results_list$alternative_3_prime_splice_site)\n\n [1] \"module_id\"                                                   \n [2] \"gene_id\"                                                     \n [3] \"gene_name\"                                                   \n [4] \"seqid\"                                                       \n [5] \"strand\"                                                      \n [6] \"lsv_id\"                                                      \n [7] \"event_id\"                                                    \n [8] \"complex\"                                                     \n [9] \"denovo\"                                                      \n[10] \"reference_exon_coord\"                                        \n[11] \"spliced_with\"                                                \n[12] \"spliced_with_coord\"                                          \n[13] \"junction_name\"                                               \n[14] \"junction_coord\"                                              \n[15] \"event_size\"                                                  \n[16] \"event_non_changing\"                                          \n[17] \"event_changing\"                                              \n[18] \"junction_changing\"                                           \n[19] \"SFPQ_HepG2_Control_median_psi\"                               \n[20] \"SFPQ_HepG2_shRNA_median_psi\"                                 \n[21] \"SFPQ_HepG2_shRNA.SFPQ_HepG2_Control_median_dpsi\"             \n[22] \"SFPQ_HepG2_shRNA.SFPQ_HepG2_Control_probability_changing\"    \n[23] \"SFPQ_HepG2_shRNA.SFPQ_HepG2_Control_probability_non_changing\"\n[24] \"class\"                                                       \n\ncols &lt;- c(\"gene_name\", \n  \"seqid\", \n  \"strand\", \n  \"lsv_id\", \n  \"complex\",\n  \"junction_coord\",\n  \"SFPQ_HepG2_Control_median_psi\", \n  \"SFPQ_HepG2_shRNA_median_psi\", \n  \"SFPQ_HepG2_shRNA.SFPQ_HepG2_Control_median_dpsi\",\n  \"SFPQ_HepG2_shRNA.SFPQ_HepG2_Control_probability_changing\",\n  \"class\")\n\nIn order to do that to all objects in the list (all splicing classes), we use a for loop again.\n\nfor(i in 1:length(splice_results_list)){\n  print(names(splice_results_list[i]))\n  splice_results_list[[i]] =  select(splice_results_list[[i]], cols)\n}\n\n[1] \"alternative_3_prime_splice_site\"\n[1] \"alternative_5_prime_splice_site\"\n[1] \"cassette_exons\"\n[1] \"alternative_first_exon\"\n[1] \"alternative_last_exon\"\n[1] \"mutually_exclusive_exons\"\n[1] \"intron_retention\"\n\n\n\n\nMake one data.frame combining all classes\n\n# Combine all\nsplice_results &lt;- rbind(splice_results_list$alternative_3_prime_splice_site,\n                        splice_results_list$alternative_5_prime_splice_site,\n                        splice_results_list$cassette_exons,\n                        splice_results_list$alternative_first_exon,\n                        splice_results_list$alternative_last_exon,\n                        splice_results_list$mutually_exclusive_exons,\n                        splice_results_list$intron_retention)\nhead(splice_results) %&gt;% kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngene_name\nseqid\nstrand\nlsv_id\ncomplex\njunction_coord\nSFPQ_HepG2_Control_median_psi\nSFPQ_HepG2_shRNA_median_psi\nSFPQ_HepG2_shRNA.SFPQ_HepG2_Control_median_dpsi\nSFPQ_HepG2_shRNA.SFPQ_HepG2_Control_probability_changing\nclass\n\n\n\n\nCHCHD6\nchr3\n+\nENSG00000159685.11:s:126733078-126733222\nFalse\n126733222-126852644\n0.046\n0.056\n0.007\n0.435\nalternative_3_prime_splice_site\n\n\nCHCHD6\nchr3\n+\nENSG00000159685.11:s:126733078-126733222\nFalse\n126733222-126852647\n0.950\n0.940\n-0.007\n0.445\nalternative_3_prime_splice_site\n\n\nZNF181\nchr19\n+\nENSG00000197841.15:s:34739148-34739268\nFalse\n34739268-34739523\n0.446\n0.451\n0.011\n0.625\nalternative_3_prime_splice_site\n\n\nZNF181\nchr19\n+\nENSG00000197841.15:s:34739148-34739268\nFalse\n34739268-34739526\n0.554\n0.549\n-0.011\n0.625\nalternative_3_prime_splice_site\n\n\nNT5C2\nchr10\n-\nENSG00000076685.19:s:103101045-103101102\nTrue\n103100964-103101045\n0.029\n0.059\n0.017\n0.505\nalternative_3_prime_splice_site\n\n\nNT5C2\nchr10\n-\nENSG00000076685.19:s:103101045-103101102\nTrue\n103100943-103101045\n0.079\n0.148\n0.040\n0.645\nalternative_3_prime_splice_site\n\n\n\n\nsplice_results %&gt;% subset(lsv_id == \"ENSG00000076685.19:s:103101045-103101102\") %&gt;% kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngene_name\nseqid\nstrand\nlsv_id\ncomplex\njunction_coord\nSFPQ_HepG2_Control_median_psi\nSFPQ_HepG2_shRNA_median_psi\nSFPQ_HepG2_shRNA.SFPQ_HepG2_Control_median_dpsi\nSFPQ_HepG2_shRNA.SFPQ_HepG2_Control_probability_changing\nclass\n\n\n\n\n5\nNT5C2\nchr10\n-\nENSG00000076685.19:s:103101045-103101102\nTrue\n103100964-103101045\n0.029\n0.059\n0.017\n0.505\nalternative_3_prime_splice_site\n\n\n6\nNT5C2\nchr10\n-\nENSG00000076685.19:s:103101045-103101102\nTrue\n103100943-103101045\n0.079\n0.148\n0.040\n0.645\nalternative_3_prime_splice_site\n\n\n12423\nNT5C2\nchr10\n-\nENSG00000076685.19:s:103101045-103101102\nTrue\n103100019-103101045\n0.877\n0.790\n-0.070\n0.756\ncassette_exons\n\n\n12424\nNT5C2\nchr10\n-\nENSG00000076685.19:s:103101045-103101102\nTrue\n103100943-103101045\n0.079\n0.148\n0.040\n0.645\ncassette_exons\n\n\n12427\nNT5C2\nchr10\n-\nENSG00000076685.19:s:103101045-103101102\nTrue\n103100019-103101045\n0.877\n0.790\n-0.070\n0.756\ncassette_exons\n\n\n12428\nNT5C2\nchr10\n-\nENSG00000076685.19:s:103101045-103101102\nTrue\n103100964-103101045\n0.029\n0.059\n0.017\n0.505\ncassette_exons\n\n\n\n\n# rename columns\ncolnames(splice_results) &lt;- cols &lt;- c(\"gene_name\", \n  \"seqid\", \n  \"strand\", \n  \"lsv_id\", \n  \"complex\",\n  \"junction_coord\",\n  \"ctrl_median_psi\", \n  \"cond_median_psi\", \n  \"dpsi\",\n  \"probability_changing\",\n  \"class\")\n\n\n# remove the list \n#remove(splice_results_list)\n\n\n\nRemoving the target LSV perspective\nIf we now look at the lsv_ids we can see, that the same lsv_id always exists once with a â:s:â and once with a â:t:â in the middle. These are the quantification for the same LSV once from the source (:s:) and once from the target (:t:) perspective (We this also in the VOILA visualisation part).\nThis information can be used in more advanced analyses. For simplicity we here only look at the source perspective and remove all rows with the target perspective.\n\n# select only rows with the source perspective (that contain :s: in te lsv_id)\nsplice_results &lt;- subset(splice_results, grepl(lsv_id, pattern = \":s:\")) \n\n\n\nRemoving duplicated LSV junctions\nIf we look at the complex events, we can see that some rows are duplicated. To remove them we look for rows that have the same lsv_id and junction_coord. We combine both to a unique_juction_id and remove duplicates with negating(!) the duplicated() function\n\n# Look at complex lsvs\nsplice_results %&gt;% \n  subset(complex==\"True\") %&gt;% # filter complex events\n  arrange(., lsv_id) %&gt;% # order by lsv_id \n  head() %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngene_name\nseqid\nstrand\nlsv_id\ncomplex\njunction_coord\nctrl_median_psi\ncond_median_psi\ndpsi\nprobability_changing\nclass\n\n\n\n\nDPM1\nchr20\n-\nENSG00000000419.14:s:50942031-50943273\nTrue\n50936262-50942031\n0.235\n0.170\n-0.051\n0.772\ncassette_exons\n\n\nDPM1\nchr20\n-\nENSG00000000419.14:s:50942031-50943273\nTrue\n50940933-50942031\n0.711\n0.710\n-0.004\n0.491\ncassette_exons\n\n\nDPM1\nchr20\n-\nENSG00000000419.14:s:50942031-50943273\nTrue\n50940933-50942031\n0.711\n0.710\n-0.004\n0.491\ncassette_exons\n\n\nDPM1\nchr20\n-\nENSG00000000419.14:s:50942031-50943273\nTrue\n50941209-50942031\n0.023\n0.062\n0.030\n0.676\ncassette_exons\n\n\nANKIB1\nchr7\n+\nENSG00000001629.10:s:92344978-92345066\nTrue\n92345067-92347946\n0.174\n0.175\n-0.003\n0.622\nintron_retention\n\n\nANKIB1\nchr7\n+\nENSG00000001629.10:s:92344978-92345066\nTrue\n92345066-92350950\n0.819\n0.801\n-0.008\n0.627\nintron_retention\n\n\n\n\n# remove duplicated rows\nsplice_results = splice_results %&gt;% \n  rowwise() %&gt;%\n  mutate(unique_juction_id = paste0(lsv_id, \"_\", junction_coord)) %&gt;% \n  subset(., !duplicated(unique_juction_id))\n\n# look again\nsplice_results %&gt;% \n  subset(complex==\"True\") %&gt;% # filter complex events\n  arrange(., lsv_id) %&gt;% # order by lsv_id\n  head() %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngene_name\nseqid\nstrand\nlsv_id\ncomplex\njunction_coord\nctrl_median_psi\ncond_median_psi\ndpsi\nprobability_changing\nclass\nunique_juction_id\n\n\n\n\nDPM1\nchr20\n-\nENSG00000000419.14:s:50942031-50943273\nTrue\n50936262-50942031\n0.235\n0.170\n-0.051\n0.772\ncassette_exons\nENSG00000000419.14:s:50942031-50943273_50936262-50942031\n\n\nDPM1\nchr20\n-\nENSG00000000419.14:s:50942031-50943273\nTrue\n50940933-50942031\n0.711\n0.710\n-0.004\n0.491\ncassette_exons\nENSG00000000419.14:s:50942031-50943273_50940933-50942031\n\n\nDPM1\nchr20\n-\nENSG00000000419.14:s:50942031-50943273\nTrue\n50941209-50942031\n0.023\n0.062\n0.030\n0.676\ncassette_exons\nENSG00000000419.14:s:50942031-50943273_50941209-50942031\n\n\nANKIB1\nchr7\n+\nENSG00000001629.10:s:92344978-92345066\nTrue\n92345067-92347946\n0.174\n0.175\n-0.003\n0.622\nintron_retention\nENSG00000001629.10:s:92344978-92345066_92345067-92347946\n\n\nANKIB1\nchr7\n+\nENSG00000001629.10:s:92344978-92345066\nTrue\n92345066-92350950\n0.819\n0.801\n-0.008\n0.627\nintron_retention\nENSG00000001629.10:s:92344978-92345066_92345066-92350950\n\n\nKRIT1\nchr7\n-\nENSG00000001631.17:s:92234808-92234923\nTrue\n92226682-92234808\n0.077\n0.024\n-0.026\n0.509\ncassette_exons\nENSG00000001631.17:s:92234808-92234923_92226682-92234808\n\n\n\n\n\n\n\nSave resulting data.frame for comparison\nHere we save the cleaned data.frame of the splicing results for the comparison in the next session.\n\nsaveRDS(splice_results, \"/Users/melinaklostermann/Documents/projects/students/majiq-course/spezi_scripts_website/example_data/SFPQ_HepG2.rds\")"
  },
  {
    "objectID": "global_splicing.html#number-of-detected-lsvs",
    "href": "global_splicing.html#number-of-detected-lsvs",
    "title": "Global characterisation of detected splice events",
    "section": "Number of detected LSVs",
    "text": "Number of detected LSVs\nFirst we want to know how many LSVs were detected and in how many genes these LSVs are positioned.\n\n# Number of LSVs\nsplice_results$lsv_id %&gt;% \n  unique() %&gt;% \n  length()\n\n[1] 11306\n\n# Number of splcied genes\nsplice_results$gene_name %&gt;% \n  unique() %&gt;% \n  length()\n\n[1] 6166"
  },
  {
    "objectID": "global_splicing.html#complexity-of-lsvs",
    "href": "global_splicing.html#complexity-of-lsvs",
    "title": "Global characterisation of detected splice events",
    "section": "Complexity of LSVs",
    "text": "Complexity of LSVs\nWe already learned that LSVs consist of a set of exons and a set of junctions connected to them. We call LSVs binary if they contain only two junctions and complex if they contain more than two junctions.\nYou can check how many events where complex with\n\n# number of junctions per lsv\ntable(splice_results$lsv_id) %&gt;% head()\n\n\n  ENSG00000000419.14:s:50942031-50943273 \n                                       3 \n  ENSG00000000419.14:s:50945847-50945923 \n                                       2 \nENSG00000000457.14:s:169870255-169870357 \n                                       2 \nENSG00000000460.17:s:169798857-169798958 \n                                       2 \nENSG00000000460.17:s:169850265-169850345 \n                                       2 \nENSG00000001036.14:s:143503913-143504252 \n                                       2 \n\n# number of lsvs with n junctions\nn_junctions &lt;- table(table(splice_results$lsv_id))\nn_junctions\n\n\n   2    3    4    5    6    7    9 \n9612 1366  272   41   11    3    1 \n\n\nAnd show these numbers in a bar plot:\n\nn_junctions &lt;- as.data.frame(n_junctions)\n\n# plot\nggplot(n_junctions, aes(x = Var1, y = Freq))+\n  geom_col()\n\n\n\n\n\n\n\n\nWe can see that the vast majority of LSVs contains only two junctions.\nHere are some possibilities to make the plot look nicer: - add up all LSVs with 5 or more junctions in the 5 bar - add numbers in the barchart - add axis labels - add a nice theme\n\n# Only focus the plot on 2-5junctions\n# --&gt; set all values bigger than 8 to 8\n\nn_junctions &lt;- mutate(n_junctions, Var1_plot = case_when(as.numeric(Var1) &gt;= 5 ~ 5,\n                                                         T ~ as.numeric(Var1) ))\n\nggplot(n_junctions, aes(x = Var1_plot, y = Freq))+\n  geom_col( width = 1)\n\n\n\n\n\n\n\n# some adjustments for nice plots:\n###################################\n\n# add numbers over bars\nggplot(n_junctions, aes(x = Var1_plot, y = Freq))+\n  geom_col()+\n  geom_text(data = n_junctions %&gt;% subset(Var1 %in% 1:5), \n            aes(label=Freq, x = Var1_plot, y = Freq), \n            position=position_dodge(width=0.9), vjust=0)\n\n\n\n\n\n\n\n# change axis labels\nggplot(n_junctions, aes(x = Var1_plot, y = Freq))+\n  geom_col()+\n  geom_text(data = n_junctions %&gt;% subset(Var1 %in% 1:5), \n            aes(label=Freq, x = Var1_plot, y = Freq), \n            position=position_dodge(width=0.9), vjust=0)+\n  xlab(\"Complex LSV\")+\n  ylab(\"Number of LSVs\")\n\n\n\n\n\n\n\n# cool theme\nggplot(n_junctions, aes(x = Var1_plot, y = Freq))+\n  geom_col()+\n  geom_text(data = n_junctions %&gt;% subset(Var1 %in% 1:5), \n            aes(label=Freq, x = Var1_plot, y = Freq), \n            position=position_dodge(width=0.9), vjust=0)+\n  xlab(\"Complex LSV\")+\n  ylab(\"Number of LSVs\")+\n  theme_pubr()  # try some others theme_dark(), theme_bw(), theme_minimal and chose you favorite\n\n\n\n\n\n\n\n\n\nStrength of splicing changes\nSplicing changes for each junction are indicated in the column mean_dpsi_per_lsv_junction. For a first overview about the global splicing changes, we extract the maximum deltaPSI value from each LSV and plot this information. The direction of the splicing change is ingored by using the absolut value with abs().\nWe can select the maximum value by grouping the data frame (group_by()), arranging each group by the dpsi value in descending order (arrange(), desc()) and then slicing out the first per group (slice()).\n\nhighest_junction_per_lsv &lt;- splice_results %&gt;%\n  group_by(lsv_id) %&gt;%\n  arrange(desc(abs(dpsi)), .by_group = T) %&gt;%\n  slice(1) %&gt;% \n  ungroup()\n\nhighest_junction_per_lsv %&gt;% head() %&gt;% kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngene_name\nseqid\nstrand\nlsv_id\ncomplex\njunction_coord\nctrl_median_psi\ncond_median_psi\ndpsi\nprobability_changing\nclass\nunique_juction_id\n\n\n\n\nDPM1\nchr20\n-\nENSG00000000419.14:s:50942031-50943273\nTrue\n50936262-50942031\n0.235\n0.170\n-0.051\n0.772\ncassette_exons\nENSG00000000419.14:s:50942031-50943273_50936262-50942031\n\n\nDPM1\nchr20\n-\nENSG00000000419.14:s:50945847-50945923\nFalse\n50942126-50945847\n0.126\n0.109\n-0.007\n0.485\ncassette_exons\nENSG00000000419.14:s:50945847-50945923_50942126-50945847\n\n\nSCYL3\nchr1\n-\nENSG00000000457.14:s:169870255-169870357\nFalse\n169869128-169870255\n0.083\n0.012\n-0.031\n0.502\nalternative_3_prime_splice_site\nENSG00000000457.14:s:169870255-169870357_169869128-169870255\n\n\nC1orf112\nchr1\n+\nENSG00000000460.17:s:169798857-169798958\nFalse\n169798958-169802621\n0.269\n0.150\n-0.081\n0.721\ncassette_exons\nENSG00000000460.17:s:169798857-169798958_169798958-169802621\n\n\nC1orf112\nchr1\n+\nENSG00000000460.17:s:169850265-169850345\nFalse\n169850345-169850438\n0.230\n0.048\n-0.154\n0.898\ncassette_exons\nENSG00000000460.17:s:169850265-169850345_169850345-169850438\n\n\nFUCA2\nchr6\n-\nENSG00000001036.14:s:143503913-143504252\nFalse\n143502565-143503913\n0.961\n0.882\n-0.073\n0.896\ncassette_exons\nENSG00000001036.14:s:143503913-143504252_143502565-143503913\n\n\n\n\n\nFrom this we can easily get the number of detected LSVs\nNow that we have for each LSV the maximum deltaPSI as a column in the data.frame, we can create a histogram to get an overview about the splicing changes.\n\nggplot(data=highest_junction_per_lsv, aes(x=abs(dpsi))) +\n  geom_histogram(binwidth=.025) +\n  theme_bw() +\n  labs(x=\"Maximum deltaPSI per LSV\", y=\"Frequency\")\n\n\n\n\n\n\n\n\nWe can see for both comparisons that the majority of LSVs does not show strong changes. As the first bars are so high we can not see really what is happening beyond 0.1. One way to have a better view in this region is to log10-transform the y-axis using the scale_y_log10() function of the ggplot2 package.\n\nggplot(data=highest_junction_per_lsv, aes(x=abs(dpsi))) +\n  geom_histogram(binwidth=.025) +\n  theme_bw() +\n  labs(x=\"Maximum deltaPSI per LSV\", y=\"Frequency\")+\n  scale_y_log10()\n\nA second alternative offers the xlim() function of the ggplot2 package, which automatically filters for maxDeltaPSI values between 0.075 and 0.5. You can change the range depending what you see in your data.\n\nggplot(data=highest_junction_per_lsv, aes(x=abs(dpsi))) +\n  geom_histogram(binwidth=.025) +\n  theme_bw() +\n  labs(x=\"Maximum deltaPSI per LSV\", y=\"Frequency\")+\n  theme_bw() +\n  xlim(0.075,0.5) \n\n\n\n\n\n\n\n\n\n\nSignificance of splicing changes\nThe probability we can see in the column probability_changing is based on a deltaPSI threshold that was defined in the voila tsv step. I used here a threshold of 0.05. If we see a probability of 0.9 for a junction this means that there is a 90% probability that the deltaPSI value of the junction was greater than 0.05.\nWe could also plot a histogram for the probabilities, but what is more interesting is the relationship between the maximal deltaPSI and maximal probability of the LSVs. Note that typically the maximal deltaPSI and maximal probability belong to the same junction.\nWe now create a scatter plot in which we plot for each LSV the maximal deltaPSI against the maximal probability. With geom_hline() from the ggplot2 package we can also plot a probability treshold of 0.9 (which we typically use), which will be used to define regulated LSVs later. Note that in geom_point() we use the alpha parameter that controls the transparency of the points. If we set it to a lower value, we can better see where a lot of points are plotted on top of each other.\n\n  ggplot(highest_junction_per_lsv, aes(x=abs(dpsi), y=probability_changing)) +\n    geom_point(alpha=.25) +\n    geom_hline(yintercept=0.9, col=\"red\", linetype=\"dashed\") +\n    theme_bw() +\n    labs(x=\"Maximum deltaPSI per LSV\", y=\"Maximum probability per LSV\")\n\n\n\n\n\n\n\n\nWe can see that that in the HepG2 comparison we have more LSVs above our probability threshold, which indicates that in this comparison we have more significantly regulated LSVs."
  },
  {
    "objectID": "global_splicing.html#regulated-lsvs",
    "href": "global_splicing.html#regulated-lsvs",
    "title": "Global characterisation of detected splice events",
    "section": "Regulated LSVs",
    "text": "Regulated LSVs\nNow it is time to determine the significantly changing LSVs.\n\nNumber and fraction of regulated LSVs\nWe check for each of the LSVs if the maximal probability is \\(\\ge\\) our threshold of 0.9 and store this information with TRUE or FALSE in a new column called sign.\n\n# add a column sig that tells us whether the change was significant\nhighest_junction_per_lsv$sign &lt;- highest_junction_per_lsv$probability_changing &gt;= 0.9\nhead(highest_junction_per_lsv) %&gt;% kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngene_name\nseqid\nstrand\nlsv_id\ncomplex\njunction_coord\nctrl_median_psi\ncond_median_psi\ndpsi\nprobability_changing\nclass\nunique_juction_id\nsign\n\n\n\n\nDPM1\nchr20\n-\nENSG00000000419.14:s:50942031-50943273\nTrue\n50936262-50942031\n0.235\n0.170\n-0.051\n0.772\ncassette_exons\nENSG00000000419.14:s:50942031-50943273_50936262-50942031\nFALSE\n\n\nDPM1\nchr20\n-\nENSG00000000419.14:s:50945847-50945923\nFalse\n50942126-50945847\n0.126\n0.109\n-0.007\n0.485\ncassette_exons\nENSG00000000419.14:s:50945847-50945923_50942126-50945847\nFALSE\n\n\nSCYL3\nchr1\n-\nENSG00000000457.14:s:169870255-169870357\nFalse\n169869128-169870255\n0.083\n0.012\n-0.031\n0.502\nalternative_3_prime_splice_site\nENSG00000000457.14:s:169870255-169870357_169869128-169870255\nFALSE\n\n\nC1orf112\nchr1\n+\nENSG00000000460.17:s:169798857-169798958\nFalse\n169798958-169802621\n0.269\n0.150\n-0.081\n0.721\ncassette_exons\nENSG00000000460.17:s:169798857-169798958_169798958-169802621\nFALSE\n\n\nC1orf112\nchr1\n+\nENSG00000000460.17:s:169850265-169850345\nFalse\n169850345-169850438\n0.230\n0.048\n-0.154\n0.898\ncassette_exons\nENSG00000000460.17:s:169850265-169850345_169850345-169850438\nFALSE\n\n\nFUCA2\nchr6\n-\nENSG00000001036.14:s:143503913-143504252\nFalse\n143502565-143503913\n0.961\n0.882\n-0.073\n0.896\ncassette_exons\nENSG00000001036.14:s:143503913-143504252_143502565-143503913\nFALSE\n\n\n\n\n# Look at how many are significant and how many not\ntable(highest_junction_per_lsv$sign)  %&gt;% kable()\n\n\n\n\nVar1\nFreq\n\n\n\n\nFALSE\n9932\n\n\nTRUE\n1374\n\n\n\n\n# calculate percentages\nt &lt;- table(highest_junction_per_lsv$sign) \n\n(t/sum(t)) %&gt;% kable()\n\n\n\n\nVar1\nFreq\n\n\n\n\nFALSE\n0.8784716\n\n\nTRUE\n0.1215284\n\n\n\n\n\nWe can also plot this information with a stacked bar chart.We add the coord_cartesian() function of ggplot2 to zoom-in the y-axis (0 to 2000), as we do not have so many regulated events. You can adjust the ylim input if you want.\n\ngg_df &lt;- table(highest_junction_per_lsv$sign) %&gt;% \n  as.data.frame()\n\nggplot(gg_df, aes( x = 1, y = Freq, fill=Var1))+\n  geom_col() +\n  #coord_cartesian(ylim=(c(0,2000))) +\n  labs(x=\"Comparison\", y=\"Frequency\") +\n  theme_bw()+\n  geom_text(aes(x = 1, label=Freq), vjust=2, col = \"white\")\n\n\n\n\n\n\n\n\nIn this plot we can see the absolute number of significant LSVs among all LSVs. Next to the absolute number we could also plot the fraction of significant LSVs among all LSVs. Fraction is similar to percentage when you multiply it by 100. This makes the comparison between comparisons with different number of LSVs more fair.\n\nggplot(gg_df, aes( x = 1, y = Freq, fill=Var1))+\n  geom_col(position = \"fill\") +\n  labs(x=\"Comparison\", y=\"Frequency\") +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\nColour significant changes\nWe can also color the significant LSVs in the scatterplot from above:\n\n  ggplot(highest_junction_per_lsv, aes(x=abs(dpsi), y=probability_changing, color = sign)) +\n    geom_point(alpha=.25) +\n    geom_hline(yintercept=0.9, col=\"red\", linetype=\"dashed\") +\n    theme_bw() +\n  scale_color_manual(values = c(\"black\", \"blue\"))+\n    labs(x=\"Maximum deltaPSI per LSV\", y=\"Maximum probability per LSV\")\n\n\n\n\n\n\n\n\n\n\nTop 10 spliced LSVs\nIf we want to know the LSVs with the highest changes. We can arrange() the data.frame by the dpsi values and look at the top 10.\n\ntop10 &lt;- highest_junction_per_lsv %&gt;% \n  arrange(desc(abs(dpsi))) %&gt;% \n  head(n = 10)\n\ntop10 %&gt;% kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngene_name\nseqid\nstrand\nlsv_id\ncomplex\njunction_coord\nctrl_median_psi\ncond_median_psi\ndpsi\nprobability_changing\nclass\nunique_juction_id\nsign\n\n\n\n\nSNX27\nchr1\n+\nENSG00000143376.14:s:151693424-151693483\nFalse\n151693483-151693593\n0.853\n0.030\n-0.821\n1.000\nalternative_last_exon\nENSG00000143376.14:s:151693424-151693483_151693483-151693593\nTRUE\n\n\nAGTRAP\nchr1\n+\nENSG00000177674.16:s:11745801-11745837\nTrue\n11745837-11745988\n0.807\n0.030\n-0.774\n1.000\nalternative_3_prime_splice_site\nENSG00000177674.16:s:11745801-11745837_11745837-11745988\nTRUE\n\n\nENSG00000291203\nchr4\n+\nENSG00000291203.1:s:119497662-119498292\nFalse\n119497903-119512351\n0.917\n0.220\n-0.706\n1.000\nalternative_last_exon\nENSG00000291203.1:s:119497662-119498292_119497903-119512351\nTRUE\n\n\nBCAS3\nchr17\n+\nENSG00000141376.23:s:61380506-61380572\nFalse\n61380571-61391977\n0.873\n0.186\n-0.694\n0.999\nalternative_last_exon\nENSG00000141376.23:s:61380506-61380572_61380571-61391977\nTRUE\n\n\nGDPD5\nchr11\n-\nENSG00000158555.15:s:75490237-75490320\nTrue\n75477795-75490237\n0.754\n0.080\n-0.680\n1.000\ncassette_exons\nENSG00000158555.15:s:75490237-75490320_75477795-75490237\nTRUE\n\n\nSVIL-AS1\nchr10\n+\nENSG00000291093.1:s:29415357-29415412\nTrue\n29415412-29420491\n0.310\n0.944\n0.656\n1.000\nalternative_last_exon\nENSG00000291093.1:s:29415357-29415412_29415412-29420491\nTRUE\n\n\nRAPGEF2\nchr4\n+\nENSG00000109756.10:s:159241201-159241368\nFalse\n159241368-159304342\n0.769\n0.112\n-0.652\n1.000\ncassette_exons\nENSG00000109756.10:s:159241201-159241368_159241368-159304342\nTRUE\n\n\nADAM22\nchr7\n+\nENSG00000008277.15:s:88181958-88183554\nFalse\n88182024-88193116\n0.250\n0.911\n0.643\n0.996\nalternative_last_exon\nENSG00000008277.15:s:88181958-88183554_88182024-88193116\nTRUE\n\n\nPLAGL1\nchr6\n-\nENSG00000118495.21:s:143960469-143961412\nFalse\n143942663-143960469\n0.792\n0.144\n-0.637\n0.984\ncassette_exons\nENSG00000118495.21:s:143960469-143961412_143942663-143960469\nTRUE\n\n\nBRD9\nchr5\n-\nENSG00000028310.18:s:869245-869404\nTrue\n865581-869245\n0.881\n0.241\n-0.634\n0.995\ncassette_exons\nENSG00000028310.18:s:869245-869404_865581-869245\nTRUE"
  },
  {
    "objectID": "DGE.html",
    "href": "DGE.html",
    "title": "Differential gene expression analysis",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "voila_gui.html",
    "href": "voila_gui.html",
    "title": "Visualising splice events",
    "section": "",
    "text": "You received the results of the MAJIQ analysis from your data set. First we want to visualize some of the results you obtained. For this we use two methods:"
  },
  {
    "objectID": "voila_gui.html#open-your-results-in-the-voila-gui",
    "href": "voila_gui.html#open-your-results-in-the-voila-gui",
    "title": "Visualising splice events",
    "section": "Open your results in the VOILA GUI",
    "text": "Open your results in the VOILA GUI\nTo visualize your splicing results, navigate to the folder where the VOILA GUI is located and double click on voila_app (MAC OS and Linux) or Voila App.lnk (Windows).\nThe Voila Launcher should open:\n\nEnter the path to the folder containing the VOILA-File of your first comparison (.voila), the path to the splicegraph.sql and a port number (any number) and click âVoila Viewâ. If you do it the first time, it may take up to 5 minutes (the program is indexing a lot of stuff). If you run it a second time it will only take some seconds.\nThe GUI might open automatically. If not open a browser window and enter âlocalhost:5005â (or your defined port number) into the address bar (red arrow).\n\nYou can do the same with a different port number for the second comparison."
  },
  {
    "objectID": "voila_gui.html#adjusting-filters",
    "href": "voila_gui.html#adjusting-filters",
    "title": "Visualising splice events",
    "section": "Adjusting filters",
    "text": "Adjusting filters\nYou can now see the results of the MAJIQ splice analysis. On the top of the page, there are several options to filter your results:\n\nOn the top are options for filtering for specific classes of splice events ( e.g.Â alternative 5â or 3â splice sites, Exon Skipping or binary events).\nBelow this you can apply a deltaPSI and Confidence Threshold filter.\n\n\nBy default the two filters are set to 0.2 (deltaPSI) and 0.95 (Confidence Threshold) filter, which means that only LSVs are shown that have at least one junction that has a 95% probability changing and a |deltaPSI| value â¥ 0.2 (20%).\nDepending on your data set, you might see very few splicing events with these filters. In this case turn down the filters to a deltaPSI of 0.05 and a Confidence Threshold of 0.9."
  },
  {
    "objectID": "voila_gui.html#overview-of-regulated-lsvs",
    "href": "voila_gui.html#overview-of-regulated-lsvs",
    "title": "Visualising splice events",
    "section": "Overview of regulated LSVs",
    "text": "Overview of regulated LSVs\nBelow the filters you can see a table with 5 columns. The first column tells us the name of the gene in which the LSV is located and the second column specifies a unique ID for the LSV. The last column offers a UCSC link (not important for us).\n\nThe third column depicts a simplified scheme of the LSV: The yellow box is the source or target exon of the LSV and the number in it tell you that it is the nth exon in the gene. The grey boxes are all other exons connected to the source or target exon and the colored lines stand for the splice-junctions. Intron retention are denoted by colored smaller boxes between two exons. Alternative 3â or 5â splice sites are depicted as doted lines inside the exons. An LSV with only two junctions is called binary LSV, LSVs with more than two junctions is called complex LSV.\n{fig-visualisation}\nThe fourth column the deltaPSI values of the involved junctions. The color of the bar corresponds to the color of the junction in the LSV scheme. If you click on a plot in the fourth column, the bar plot changes into a violin plot giving us more detailed information."
  },
  {
    "objectID": "voila_gui.html#genewise-details-on-lsvs",
    "href": "voila_gui.html#genewise-details-on-lsvs",
    "title": "Visualising splice events",
    "section": "Genewise details on LSVs",
    "text": "Genewise details on LSVs\nAs an example we click on the plot of the LSV located in the TNRC6A gene (from a comparison between an HNRNPH1 knockdown and a corresponding control sample).\n\nIf we now have a closer look on this exon skipping event, we can see that the red junction supports the inclusion of the inner exon, while the blue junction skips it. In the violin plot we can see that upon knockdown of HNRNPH1 the usage of the red junction is upregulated by 48.1% and the usage of the blue junction is downregulated by 48.1%.\nTo get more details about this specific LSV you can click on the gene name. \nIn the upper part we can see two splicegraphs for TNR6CA. The upper one belongs to the control experiment and the lower one to the knockdown experiment. The numbers at the splice junctions are indicating the number of reads supporting the junction. This is the sum over the replicates. The splicegraph is interactive, meaning you can go with the mouse on the splice junctions or exons and get information about the genomic coordinates and the length.\nIn the lower part you can see all detected LSVs of the gene. You can click the Highlight checkbox to highlight the LSV in the splicegraph. In contrast to the previous page, we now also have bar plots showing the PSI values in the control and knockdown experiments (column 4 and 6). Reminder dPSI = PSI(condition) - PSI(control). You can also click these to get a violin plot.\nLetâs have a look on the strongly regulated exon skipping event in this gene (red arrow). As we can see, this LSV is from a source exon perspective as only junctions going out of this exon are quantified. If you look closely, you can see that there is a second LSV from a target exon perspective supporting the same event (green arrow). As we can see from the deltaPSI values the two LSVs are in agreement about the regulation. The upper LSV claims that the first inclusion junction is going up by 48.1% and the lower LSV is showing an upregulation of the second inclusion junction by 53%. Such small fluctuations are expected.\n\nYou now can continue to screen for interesting events in your data. It might be helpful to check in the literature for alternative splicing events that are known to be regulated by your protein."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Spezialisierungspraktikum RNA Biology",
    "section": "",
    "text": "On the following pages you can find the course materials for the Spezialisierungspraktikum RNA Biology."
  },
  {
    "objectID": "index.html#in-this-praktikum-we-look-at-the-following-topics",
    "href": "index.html#in-this-praktikum-we-look-at-the-following-topics",
    "title": "Spezialisierungspraktikum RNA Biology",
    "section": "In this Praktikum we look at the following topics:",
    "text": "In this Praktikum we look at the following topics:\n\nProcessing of RNAseq data\nDifferential Gene Expression Analysis\nDifferential analysis of local splice variants"
  },
  {
    "objectID": "index.html#about-us",
    "href": "index.html#about-us",
    "title": "Spezialisierungspraktikum RNA Biology",
    "section": "About us",
    "text": "About us\nZarnack group for Computational RNA Biology, Goethe UniversitÃ¤t Frankfurt\nAutors: Melina Klostermann, Mario Keller, Kathi Zarnack\nVisit us on our webpage or on GitHub."
  },
  {
    "objectID": "tasks.html",
    "href": "tasks.html",
    "title": "Tasks",
    "section": "",
    "text": "Please do the following tasks always after the corresponding session. We will look at your results and problems that occurred always in the beginning of the next session.\nAt the end of the course make a protocol of all your splicing analyses in form of a quarto or rmarkdown report (.qmd/.rmd) and render it to pdf or html. Include all tasks below in the protocol.\n\nTasks for part 1 - Visualisation\nInstructions for screening AS events in the VOILA GUI and verification via Sashimi Plots in IGV can be found in part1_GUI_and_SashimiPlots.pdf.\n\nFor one of your comparisons search for binary LSVs with |deltaPSI| &gt; 0.1 and Confidence Threshold &gt; 0.9. If you canât find events lower the deltaPSI threshold. The screenshots should include the Gene Name, the LSV ID, the LSV Schema and the violin plot of the dPSI values.\n\n\nTake a screenshot of 1 LSV representing an exon skipping event.\nTake a screenshot of 1 LSV representing an intron retention event.\nTake a screenshot of 1 LSV representing an alternative 5â splice site event.\nTake a screenshot of 1 LSV representing an alternative 3â splice site event.\n\n\nTake for each of the five LSVs also screenshots for your other data set (e.g.Â your other cell line). You can use the LSV identifier to find them. If you canât find the same events lower the deltaPSI and confidence threshold. You can lower both thresholds to 0 to see all detected LSVs. If you still cannot find them use take screenshots of other events.\nCompare the regulation of the five LSVs between the two comparisons.\nTake one of your five LSVs and create a sashimi plot including all of your comparisons in IGV.\n\n\nYou need to load the BAM-Files into IGV and navigate to the region where the LSV is located. It is sufficient if you use the BAM-File of one replicate per condition.\nIf the BAM-Files are too huge for your computer subset them in Galaxy to the chromosome on which the LSV is located.\n\n\nDoes the sashimi plot confirm what you have seen in the VOILA GUI?\n\n\n\nTasks for part 2 - Analyzing AS at the level of LSVs\n\nRepeat or revisit the functions in theâuseful Râ section. (This part does not have to be included in the proctocol in the end.)\nAnalyse both of you data sets following the steps of the âGlobal analysisâ section.\nHow many LSVs are detected in each data set? How many are significantly regulated?\nWhat are the top regulated LSVs in each data set?\nDo the data sets have a similar depth? (Are the numbers of detected and regukated LSVS similar?)\nWhat is the most common splicing class for your protein? Do a small literature research on the protein, that was knocked down / knocked out in you data set. Which types of splicing would you expect? Is this also what the data shows?\n\n\n\nTasks for part 3 - Analyzing AS at the level of AS events\nCompare the splicing in both your data sets using steps from the âComparison of data setsâ section."
  },
  {
    "objectID": "data_processing_galaxy.html",
    "href": "data_processing_galaxy.html",
    "title": "Processing",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "useful_R.html",
    "href": "useful_R.html",
    "title": "Some useful R",
    "section": "",
    "text": "Before we start with the splicing analysis in R I want to introduce some important functions and operators that will help us to process the splicing output.\nlibrary(knitr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union"
  },
  {
    "objectID": "useful_R.html#the-pipe-operator",
    "href": "useful_R.html#the-pipe-operator",
    "title": "Some useful R",
    "section": "The pipe operator %>%",
    "text": "The pipe operator %&gt;%\nLetâs start with the %&gt;% operator. This operator allows the piping of a functionâs output to another function, where it is used as input.\nAssume we have a vector with decimal numbers and want to round them to integers and subsequently calculate the sum. One way to do this is the following.\n\ndecimals &lt;- c(2.5, 1.2, 3.6, 4.1, 4.6, 7.3, 9.2, 3.1, 5.3)\nsum(round(decimals))\n\n[1] 40\n\n\nAs you can see the command is quite hard to read and it becomes harder if you apply more than two functions. One nice alternative is the mentioned %&gt;% operator. Note that most of the time it is not nessary to add () behind a functionâs name.\n\ndecimals &lt;- c(2.5, 1.2, 3.6, 4.1, 4.6, 7.3, 9.2, 3.1, 5.3)\nround(decimals) %&gt;% sum\n\n[1] 40\n\n\nThis helps already a lot. But we can make it even more easier to read.\n\ndecimals &lt;- c(2.5, 1.2, 3.6, 4.1, 4.6, 7.3, 9.2, 3.1, 5.3)\ndecimals %&gt;% round %&gt;% sum\n\n[1] 40\n\n\nAs you can see we can directly pipe the the vector called decimals to round() and the output to sum()."
  },
  {
    "objectID": "useful_R.html#count-the-number-of-occurences-with-the-table-function",
    "href": "useful_R.html#count-the-number-of-occurences-with-the-table-function",
    "title": "Some useful R",
    "section": "Count the number of occurences with the table function",
    "text": "Count the number of occurences with the table function\nOften we have a data.frame column with some specific information that we want to summarize. Here the table() function is helpful as it counts how often a certain string or value is found in the column.\nAssume we have a data.frame that stores the regulation of eight genes (A to H) and we want to know how many genes are upregulated, not regulated or downregulated. We can easily solve this task with table().\n\nregulationDataFrame &lt;- data.frame(\n  gene=c(\"A\", \"B\", \"C\", \"D\",\"E\", \"F\", \"G\", \"H\"),\n  regulation=c(\"up\", \"down\", \"up\", \"no\", \"no\", \"down\", \"up\", \"up\")\n)\ntable(regulationDataFrame$regulation)\n\n\ndown   no   up \n   2    2    4 \n\n\nAs you can see we now have a nice overview about the regulation. One nice feature of table() is that you can provide more than one column as input.\nFor instance we could also have information about the gene type and want to summarize the regulation across the different gene types. Here is an easy example, where we have 3 gene types, namely protein-coding, miRNA and rRNA.\n\nregulationDataFrame$type = c(\"protein-coding\", \"rRNA\", \"protein-coding\", \"miRNA\",\n           \"miRNA\", \"rRNA\", \"protein-coding\", \"protein-coding\")\n\ntable(regulationDataFrame$type, regulationDataFrame$regulation)\n\n                \n                 down no up\n  miRNA             0  2  0\n  protein-coding    0  0  4\n  rRNA              2  0  0\n\n\nWe can see that the upregulated genes are encoding for proteins, while the downregulated genes encode rRNAs and the non-regulated ones miRNAs."
  },
  {
    "objectID": "useful_R.html#use-kable-to-make-a-table-or-data.frame-output-look-nicer",
    "href": "useful_R.html#use-kable-to-make-a-table-or-data.frame-output-look-nicer",
    "title": "Some useful R",
    "section": "Use kable to make a table or data.frame output look nicer",
    "text": "Use kable to make a table or data.frame output look nicer\nThe kable() function from the knitr package makes tables look nicer in the html/pdf reports.\n\ntable(regulationDataFrame$type, regulationDataFrame$regulation) %&gt;% kable()\n\n\n\n\n\ndown\nno\nup\n\n\n\n\nmiRNA\n0\n2\n0\n\n\nprotein-coding\n0\n0\n4\n\n\nrRNA\n2\n0\n0"
  },
  {
    "objectID": "useful_R.html#for-loops",
    "href": "useful_R.html#for-loops",
    "title": "Some useful R",
    "section": "for loops",
    "text": "for loops\nFor loops are the basic loop function in R. We will use it to loop over lists.\n\nfor(i in 1:5){\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\nfor(i in 1:5){\n  y = i + 3\n  print(paste(i, \"+ 3 =\", y )) \n}\n\n[1] \"1 + 3 = 4\"\n[1] \"2 + 3 = 5\"\n[1] \"3 + 3 = 6\"\n[1] \"4 + 3 = 7\"\n[1] \"5 + 3 = 8\""
  },
  {
    "objectID": "useful_R.html#handling-of-data.frames",
    "href": "useful_R.html#handling-of-data.frames",
    "title": "Some useful R",
    "section": "Handling of data.frames",
    "text": "Handling of data.frames\nMost of the time we will work with with the results of the splicing analysis in data.frame format. There are several nice functions that help with data frames. Some of them are quickly shown in the following.\n\nAdding new columns with mutate\nThe mutate() function is an easy way to add new columns to a data.frame.\n\n# mutate can write the same word in every row\nregulationDataFrame %&gt;% mutate(newColumn = \"new\")\n\n  gene regulation           type newColumn\n1    A         up protein-coding       new\n2    B       down           rRNA       new\n3    C         up protein-coding       new\n4    D         no          miRNA       new\n5    E         no          miRNA       new\n6    F       down           rRNA       new\n7    G         up protein-coding       new\n8    H         up protein-coding       new\n\n# duplicate another row\nregulationDataFrame %&gt;% mutate(newColumn = gene)\n\n  gene regulation           type newColumn\n1    A         up protein-coding         A\n2    B       down           rRNA         B\n3    C         up protein-coding         C\n4    D         no          miRNA         D\n5    E         no          miRNA         E\n6    F       down           rRNA         F\n7    G         up protein-coding         G\n8    H         up protein-coding         H\n\n# or modify an existing column.\nregulationDataFrame %&gt;% \n  mutate(newColumn = paste0(regulation, \"-regulation\"))\n\n  gene regulation           type       newColumn\n1    A         up protein-coding   up-regulation\n2    B       down           rRNA down-regulation\n3    C         up protein-coding   up-regulation\n4    D         no          miRNA   no-regulation\n5    E         no          miRNA   no-regulation\n6    F       down           rRNA down-regulation\n7    G         up protein-coding   up-regulation\n8    H         up protein-coding   up-regulation\n\n\n\n\nUsing case_when to mutate conditionally\nmutate() can also be use conditionally by combining it with the case_when() function.\n\nregulationDataFrame %&gt;% \n  mutate(change = case_when( regulation == \"no\" ~ \"no change\",\n                             T ~ \"change\")\n         )\n\n  gene regulation           type    change\n1    A         up protein-coding    change\n2    B       down           rRNA    change\n3    C         up protein-coding    change\n4    D         no          miRNA no change\n5    E         no          miRNA no change\n6    F       down           rRNA    change\n7    G         up protein-coding    change\n8    H         up protein-coding    change\n\n\n\n\nPicking only certain rows (subset) or columns (select)\nWe can subset a data.frame to only the certein rows with the subset() function. For this we need to pass a logical argument to the subset function.\nQuick reminder: A logical statement will output a vector of TRUE or FALSE. Typical logical operators in R are == for is equal and != for is not equal. Another nice one is %in%, which checks if a value is inside a vector.\n\n# logical statements\nregulationDataFrame$regulation == \"up\"\n\n[1]  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE\n\nregulationDataFrame$regulation != \"up\"\n\n[1] FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE\n\nregulationDataFrame$regulation %in% c(\"up\", \"down\")\n\n[1]  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE\n\n# subsetting for specific rows\nregulationDataFrame %&gt;% subset(regulation == \"up\")\n\n  gene regulation           type\n1    A         up protein-coding\n3    C         up protein-coding\n7    G         up protein-coding\n8    H         up protein-coding\n\n\n\n\nExtract certain patterns with grepl()\nThe grepl() function also returns a logical vector. It can be used to search for a specific pattern within a vector. This can then also be used together with subset, to subset a data.frame for the rows that contains this pattern in a specific row.\n\ngrepl(regulationDataFrame$type, pattern = \"protein-coding\")\n\n[1]  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE\n\ngrepl(regulationDataFrame$type, pattern = \"protein\")\n\n[1]  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE\n\nsubset(regulationDataFrame, grepl(regulationDataFrame$type, pattern = \"protein-coding\"))\n\n  gene regulation           type\n1    A         up protein-coding\n3    C         up protein-coding\n7    G         up protein-coding\n8    H         up protein-coding\n\n\n\n\nArranging data.frames\ndata.frames can be sorted by a speciffic coulmn or also by multiple columns with the arrange() function. arrange() sorts character columns by alphabetical order and numeric columns from lowest to highest. the function desc() can be used to sort from highest to lowest instead.\n\n# arranging a data.frame by a character column\nregulationDataFrame %&gt;% arrange(type)\n\n  gene regulation           type\n1    D         no          miRNA\n2    E         no          miRNA\n3    A         up protein-coding\n4    C         up protein-coding\n5    G         up protein-coding\n6    H         up protein-coding\n7    B       down           rRNA\n8    F       down           rRNA\n\n# arranging a data.frame by a numeric column\nregulationDataFrame$someNumber &lt;- c(1,5,8,2,2,4,3,5)\nregulationDataFrame %&gt;% arrange(someNumber)\n\n  gene regulation           type someNumber\n1    A         up protein-coding          1\n2    D         no          miRNA          2\n3    E         no          miRNA          2\n4    G         up protein-coding          3\n5    F       down           rRNA          4\n6    B       down           rRNA          5\n7    H         up protein-coding          5\n8    C         up protein-coding          8\n\n# arranging by two columns\nregulationDataFrame %&gt;% arrange(type, someNumber)\n\n  gene regulation           type someNumber\n1    D         no          miRNA          2\n2    E         no          miRNA          2\n3    A         up protein-coding          1\n4    G         up protein-coding          3\n5    H         up protein-coding          5\n6    C         up protein-coding          8\n7    F       down           rRNA          4\n8    B       down           rRNA          5\n\n# arranging from highest to lowest\nregulationDataFrame %&gt;% arrange(desc(someNumber))\n\n  gene regulation           type someNumber\n1    C         up protein-coding          8\n2    B       down           rRNA          5\n3    H         up protein-coding          5\n4    F       down           rRNA          4\n5    G         up protein-coding          3\n6    D         no          miRNA          2\n7    E         no          miRNA          2\n8    A         up protein-coding          1\n\n\n\n\nGrouping data.frames\n\nregulationDataFrame %&gt;% group_by(regulation) %&gt;% arrange(desc(someNumber), .by_group = T) \n\n# A tibble: 8 Ã 4\n# Groups:   regulation [3]\n  gene  regulation type           someNumber\n  &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;               &lt;dbl&gt;\n1 B     down       rRNA                    5\n2 F     down       rRNA                    4\n3 D     no         miRNA                   2\n4 E     no         miRNA                   2\n5 C     up         protein-coding          8\n6 H     up         protein-coding          5\n7 G     up         protein-coding          3\n8 A     up         protein-coding          1"
  },
  {
    "objectID": "splicing_index.html",
    "href": "splicing_index.html",
    "title": "Differential Splicing Analysis",
    "section": "",
    "text": "This is the splicing part of Spezialisierungspraktikum RNA Biology.\nIn brief, we visualize and explore the output a splicing analysis done with MAJIQ."
  },
  {
    "objectID": "splicing_index.html#what-is-splicing",
    "href": "splicing_index.html#what-is-splicing",
    "title": "Differential Splicing Analysis",
    "section": "What is splicing?",
    "text": "What is splicing?"
  },
  {
    "objectID": "splicing_index.html#what-are-splice-events-and-local-splice-variants-lsvs",
    "href": "splicing_index.html#what-are-splice-events-and-local-splice-variants-lsvs",
    "title": "Differential Splicing Analysis",
    "section": "What are splice events and local splice variants (LSVs)?",
    "text": "What are splice events and local splice variants (LSVs)?"
  },
  {
    "objectID": "splicing_index.html#splicing-classes",
    "href": "splicing_index.html#splicing-classes",
    "title": "Differential Splicing Analysis",
    "section": "What are the most common classes of splicing?",
    "text": "What are the most common classes of splicing?"
  },
  {
    "objectID": "splicing_index.html#what-are-psi-and-dpsi",
    "href": "splicing_index.html#what-are-psi-and-dpsi",
    "title": "Differential Splicing Analysis",
    "section": "What are PSI and dPSI?",
    "text": "What are PSI and dPSI?"
  },
  {
    "objectID": "splicing_index.html#what-is-the-probability-changing",
    "href": "splicing_index.html#what-is-the-probability-changing",
    "title": "Differential Splicing Analysis",
    "section": "What is the probability changing?",
    "text": "What is the probability changing?"
  },
  {
    "objectID": "splicing_index.html#majiq-workflow",
    "href": "splicing_index.html#majiq-workflow",
    "title": "Differential Splicing Analysis",
    "section": "How does the majiq workflow look like?",
    "text": "How does the majiq workflow look like?"
  },
  {
    "objectID": "splicing_index.html#what-are-the-output-files-from-majiq",
    "href": "splicing_index.html#what-are-the-output-files-from-majiq",
    "title": "Differential Splicing Analysis",
    "section": "What are the output files from majiq?",
    "text": "What are the output files from majiq?"
  }
]