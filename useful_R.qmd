---
title: "Some useful R"

---

select & subset
mutate
group_by
for loops
grepl


Before we start with the actual analysis I want to introduce some important functions and operators that will help us to process the splicing output.

```{r}
library(knitr)
library(dplyr)
```

## The pipe operator %\>%

Let's start with the %\>% operator. This operator allows the piping of a function's output to another function, where it is used as input.

Assume we have a vector with decimal numbers and want to round them to integers and subsequently calculate the sum. One way to do this is the following.

```{r}
decimals <- c(2.5, 1.2, 3.6, 4.1, 4.6, 7.3, 9.2, 3.1, 5.3)
sum(round(decimals))
```

As you can see the command is quite hard to read and it becomes harder if you apply more than two functions. One nice alternative is the mentioned *%\>% operator*. Note that most of the time it is not nessary to add () behind a function's name.

```{r}
decimals <- c(2.5, 1.2, 3.6, 4.1, 4.6, 7.3, 9.2, 3.1, 5.3)
round(decimals) %>% sum
```

This helps already a lot. But we can make it even more easier to read.

```{r}
decimals <- c(2.5, 1.2, 3.6, 4.1, 4.6, 7.3, 9.2, 3.1, 5.3)
decimals %>% round %>% sum
```

As you can see we can directly pipe the the vector called decimals to *round()* and the output to *sum()*.


## Count the number of occurences with the table function

Often we have a data.frame column with some specific information that we want to summarize. Here the *table()* function is helpful as it counts how often a certain string or value is found in the column.

Assume we have a data.frame that stores the regulation of eight genes (A to H) and we want to know how many genes are upregulated, not regulated or downregulated. We can easily solve this task with *table()*.

```{r}
regulationDataFrame <- data.frame(
  gene=c("A", "B", "C", "D","E", "F", "G", "H"),
  regulation=c("up", "down", "up", "no", "no", "down", "up", "up")
)
table(regulationDataFrame$regulation)
```

As you can see we now have a nice overview about the regulation. One nice feature of *table()* is that you can provide more than one column as input.

For instance we could also have information about the gene type and want to summarize the regulation across the different gene types. Here is an easy example, where we have 3 gene types, namely protein-coding, miRNA and rRNA.

```{r}

regulationDataFrame$type = c("protein-coding", "rRNA", "protein-coding", "miRNA",
           "miRNA", "rRNA", "protein-coding", "protein-coding")

table(regulationDataFrame$type, regulationDataFrame$regulation)
```

We can see that the upregulated genes are encoding for proteins, while the downregulated genes encode rRNAs and the non-regulated ones miRNAs.

## Use kable to make a table or data.frame output look nicer


## Extract certain patterns with grepl()

## for loops

## Handling of data.frames

### Adding new columns with mutate

### Using case_when to mutate conditionally

### Picking only certain rows (subset) or columns (select)

### Arranging data.frames

### Grouping data.frames




With the new operator and functions we learned in this section, we are well prepared for the processing of the MAJIQ output.


