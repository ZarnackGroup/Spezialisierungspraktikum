---
title: "Some useful R"

---

select & subset
mutate
group_by
for loops
grepl


# Important functions and operators

Before we start with the actual analysis I want to introduce some important functions and operators that will help us to process the MAJIQ output. These are the *%\>% operator* of the dplyr package, the *str_count()* and *str_split()* function of the stringr package as well as the *sapply()* and the *table()* function of the base package.

Let's load the dplyr and stringr package so that we can use the operator and the functions. *sapply()* and *table()* are automatically loaded.

```{r}
library(dplyr)
library(stringr)
```

## The pipe operator %\>%

Let's start with the %\>% operator. This operator allows the piping of a function's output to another function, where it is used as input.

Assume we have a vector with decimal numbers and want to round them to integers and subsequently calculate the sum. One way to do this is the following.

```{r}
decimals <- c(2.5, 1.2, 3.6, 4.1, 4.6, 7.3, 9.2, 3.1, 5.3)
sum(round(decimals))
```

As you can see the command is quite hard to read and it becomes harder if you apply more than two functions. One nice alternative is the mentioned *%\>% operator*. Note that most of the time it is not nessary to add () behind a function's name.

```{r}
decimals <- c(2.5, 1.2, 3.6, 4.1, 4.6, 7.3, 9.2, 3.1, 5.3)
round(decimals) %>% sum
```

This helps already a lot. But we can make it even more easier to read.

```{r}
decimals <- c(2.5, 1.2, 3.6, 4.1, 4.6, 7.3, 9.2, 3.1, 5.3)
decimals %>% round %>% sum
```

As you can see we can directly pipe the the vector called decimals to *round()* and the output to *sum()*.

## Character string operations with stringr functions

The package stringr provides a set of functions that allows us to obtain information about character strings (e.g. `r c("a", "b", "c")`) and to process them. Two of these functions are *str_count()* and *str_split()*, which we will use in the processing of the MAJIQ output. Assume we have a vector with character strings that contain integers separated by a semicolon and we want to count the number of integers within the each string. With *str_count()* we can simply count the number of semicolons in each character string and add 1 afterwards.

```{r}
characterStrings <- c("5;1", "3;2;1", "1", "5;4;3;6")
characterStrings %>% str_count(pattern=";") + 1
```

As you can see it is super easy and we also used the %\>% operator, which makes it look nicer.

But what if we want to create a list where each entry is a vector with the integers of each character string? Here *str_split()* comes into play, which splits each character string based on a defined pattern (e.g. ;). For each original character string the function creates a list entry.

```{r}
characterStrings <- c("5;1", "3;2;1", "1", "5;4;3;6")
characterStrings %>% str_split(pattern=";")
```

This list can afterwards be further processed. We will use it in the next section and determine the maximal value in each list entry.

## sapply an alternative to for-loops

As mentioned above we want to determine the maximal value in each list entry.

One intuitive way is to loop over the list with a for-loop and store the maximal value of each entry in a vector. Note that the integers in the list entries are still character strings and need to be turned into integers via the *as.integer()* function.

```{r}
integerList <- characterStrings %>% str_split(pattern=";")
maxValues <- c() # create empty vector
for(integers in integerList){
  maxValue <- integers %>% as.integer %>% max
  maxValues <- c(maxValues, maxValue) # add the maxValue to the vector
}
maxValues
```

What we do here is that we iterate over each list entry, determine the maximal value and and store this value in a vector called maxValues.

A nicer solution is *sapply()*, which looks quite complicated in the beginning but as soon as you get used to it, you will prefer it over for-loops.

```{r}
integerList <- characterStrings %>% str_split(pattern=";")
maxValues <- integerList %>% sapply(FUN=function(integers){
  return(
    integers %>% as.integer %>% max
  )
})
maxValues
```

What happens is that *sapply()* take the integer list as first argument and applies the function provided via FUN on each entry in the list. You can either use pre-defined functions (e.g. *sum()*, *mean()* or *max()*) or define your own function, which is what I did. Our function takes the character string vector with the integers as input, transforms them from character strings into integers, determines the maximal value and returns it.

If the values in the list would already have been integers (and not character strings) it would be even easier. Here is an example:

```{r}
integerList <- list(c(5,1), c(3,2,1), c(1), c(5,4,3,6))
maxValues <- integerList %>% sapply(FUN=max)
maxValues
```

In this case we do not need to write our own function but can directly use the buit-in *max()* function.

## Count the number of occurences with the table function

Often we have a data.frame column with some specific information that we want to summarize. Here the *table()* function is helpful as it counts how often a certain string or value is found in the column.

Assume we have a data.frame that stores the regulation of eight genes (A to H) and we want to know how many genes are upregulated, not regulated or downregulated. We can easily solve this task with *table()*.

```{r}
regulationDataFrame <- data.frame(
  gene=c("A", "B", "C", "D","E", "F", "G", "H"),
  regulation=c("up", "down", "up", "no", "no", "down", "up", "up")
)
table(regulationDataFrame$regulation)
```

As you can see we now have a nice overview about the regulation. One nice feature of *table()* is that you can provide more than one column as input.

For instance we could also have information about the gene type and want to summarize the regulation across the different gene types. Here is an easy example, where we have 3 gene types, namely protein-coding, miRNA and rRNA.

```{r}

regulationDataFrame$type = c("protein-coding", "rRNA", "protein-coding", "miRNA",
           "miRNA", "rRNA", "protein-coding", "protein-coding")

table(regulationDataFrame$type, regulationDataFrame$regulation)
```

We can see that the upregulated genes are encoding for proteins, while the downregulated genes encode rRNAs and the non-regulated ones miRNAs.

With the new operator and functions we learned in this section, we are well prepared for the processing of the MAJIQ output.

\pagebreak
